// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/nikitades/url-shortener/internal/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// VisitRepository is an autogenerated mock type for the VisitRepository type
type VisitRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, urlId, urlSource, urlCode, userAgent, createdAt
func (_m *VisitRepository) Create(ctx context.Context, urlId int, urlSource string, urlCode string, userAgent string, createdAt time.Time) (domain.Visit, error) {
	ret := _m.Called(ctx, urlId, urlSource, urlCode, userAgent, createdAt)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Visit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string, string, time.Time) (domain.Visit, error)); ok {
		return rf(ctx, urlId, urlSource, urlCode, userAgent, createdAt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string, string, time.Time) domain.Visit); ok {
		r0 = rf(ctx, urlId, urlSource, urlCode, userAgent, createdAt)
	} else {
		r0 = ret.Get(0).(domain.Visit)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, string, string, time.Time) error); ok {
		r1 = rf(ctx, urlId, urlSource, urlCode, userAgent, createdAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUrlCode provides a mock function with given fields: ctx, urlCode
func (_m *VisitRepository) FindByUrlCode(ctx context.Context, urlCode string) ([]domain.Visit, error) {
	ret := _m.Called(ctx, urlCode)

	if len(ret) == 0 {
		panic("no return value specified for FindByUrlCode")
	}

	var r0 []domain.Visit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.Visit, error)); ok {
		return rf(ctx, urlCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Visit); ok {
		r0 = rf(ctx, urlCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Visit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, urlCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewVisitRepository creates a new instance of VisitRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVisitRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *VisitRepository {
	mock := &VisitRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
